@page "/"
@rendermode InteractiveServer
@using System.Buffers
@using System.IO
@using System.IO.Compression
@inject IWebHostEnvironment Env

<!-- Floating Wedding Elements -->
<div class="wedding-background">
    <div class="floating-heart heart-1">💕</div>
    <div class="floating-heart heart-2">🌹</div>
    <div class="floating-heart heart-3">💐</div>
    <div class="floating-heart heart-4">✨</div>
    <div class="floating-heart heart-5">💍</div>
    <div class="floating-heart heart-6">💕</div>
</div>

<div class="app-container">
    <!-- Main Upload Card -->
    <div class="upload-card">
        <!-- Status Section -->
        @if (ShowSuccessBanner)
        {
            <div class="status-banner success">
                <div class="status-icon">
                    <div class="wedding-success-icon">💕</div>
                </div>
                <div class="status-content">
                    @SuccessMessage
                </div>
            </div>
        }
        else
        {
            <div class="status-banner @GetStatusClass()">
                <div class="status-icon">
                    @if (SelectedFiles.Count > 0)
                    {
                        <div class="wedding-camera-icon">📸💕</div>
                    }
                    else
                    {
                        <div class="wedding-empty-icon">💐</div>
                    }
                </div>
                <div class="status-content">
                    @AlertMessage
                </div>
            </div>
        }

        <!-- Progress Bar -->
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" style="width: @ProgressPercentage%;"></div>
            </div>
            <div class="progress-text">@ProgressPercentage% Tamamlandı</div>
        </div>

        <!-- Form -->
        <form @onsubmit="OnSubmitAsync" class="upload-form" novalidate>
            <!-- Guest Name Input -->
            <div class="form-group">
                <label class="form-label">
                    <div class="wedding-user-icon">👤</div>
                    İsminiz
                </label>
                <input class="form-input"
                       @bind="PackageName"
                       @bind:event="oninput"
                       placeholder="İsminizi giriniz"
                       required />
            </div>

            <!-- File Input -->
            <div class="form-group">
                <label class="form-label">
                    <div class="wedding-camera-label">📸</div>
                    Düğün Anılarınızı Seçin
                </label>
                <div class="file-input-wrapper">
                    <InputFile @key="InputFileId"
                               class="file-input"
                               id="inputFile"
                               OnChange="OnInputFileChange"
                               accept="image/*,video/*"
                               multiple
                               required />
                    <div class="file-input-display">
                        <div class="file-input-icon">
                            <div class="wedding-upload-icon">📤</div>
                        </div>
                        <div class="file-input-text">
                            @if (SelectedFiles.Count > 0)
                            {
                                <span class="file-count">@SelectedFiles.Count anı seçildi </span>
                            }
                            else
                            {
                                <span class="file-placeholder">Anıları seçmek için tıklayın</span>
                            }
                            <span class="file-hint">Fotoğraf ve video yükleyebilirsiniz 📸</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- File Previews -->
            @if (Previews.Count > 0)
            {
                <div class="previews-section">
                    <h3 class="previews-title">
                        <div class="wedding-sparkle">✨</div>
                        Seçilen Anılar
                    </h3>
                    <div class="preview-strip">
                        @foreach (var p in VisiblePreviews)
                        {
                            if (p.IsImage && !string.IsNullOrEmpty(p.DataUrl))
                            {
                                <div class="thumb image-thumb" title="@p.Name">
                                    <img src="@p.DataUrl" alt="@p.Name" />
                                    <div class="thumb-overlay">
                                        <div class="wedding-heart"></div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="thumb video-thumb" title="@p.Name">
                                    <div class="thumb-icon">
                                        <div class="wedding-video">🎬</div>
                                    </div>
                                    <div class="thumb-label">Video</div>
                                </div>
                            }
                        }

                        @if (!ShowAllPreviews && HiddenCount > 0)
                        {
                            <button type="button"
                                    class="thumb more-thumb"
                                    @onclick="() => { ShowAllPreviews = true; }">
                                <span class="more-count">+@HiddenCount</span>
                            </button>
                        }
                    </div>
                </div>
            }

            <!-- Upload Button -->
            <div class="upload-button-container">
                <button class="upload-button @(IsUploadDisabled ? "disabled" : "")"
                        type="submit"
                        disabled="@IsUploadDisabled">
                    <div class="wedding-upload-btn-icon">📤</div>
                    Anıları Paylaş 💐
                </button>
            </div>
        </form>
    </div>
    @if (IsPreparing)
    {
        <div class="position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center bg-white bg-opacity-75" style="z-index:1050;">
            <div class="bg-white rounded-3 shadow p-4 text-center">
                <div class="spinner-border text-danger" role="status" style="width:3rem;height:3rem;">
                    <span class="visually-hidden">Yükleniyor…</span>
                </div>
                <div class="mt-3 fw-semibold text-danger">Anılar hazırlanıyor…</div>
                <div class="small text-muted">Seçtiğiniz fotoğraflar optimize ediliyor</div>
            </div>
        </div>
    }
</div>

@code {
    // ===================== STATE =====================
    private readonly List<string> uploadList = new();

    // IBrowserFile tutmak yerine temp path tutuyoruz (ID hatası olmaz)
    private sealed class TempPickedFile
    {
        public string Name { get; set; } = "";
        public string ContentType { get; set; } = "";
        public long Size { get; set; }
        public string TempPath { get; set; } = ""; // server temp
        public bool IsImage { get; set; }
    }
    private readonly List<TempPickedFile> SelectedFiles = new();
    private bool ShowSuccessBanner = false;
    private MarkupString SuccessMessage = new("");

    // Önizlemeler
    private sealed class PreviewItem
    {
        public bool IsImage { get; set; }
        public string Name { get; set; } = "";
        public string? DataUrl { get; set; }
        public string Kind { get; set; } = ""; // image/video
    }
    private readonly List<PreviewItem> Previews = new();

    private const long MaxFileSizePerFile = 2L * 1024L * 1024L * 1024L; // 2 GB
    private const int MaxPreviewVisible = 3;
    private bool ShowAllPreviews = false;

    private int HiddenCount => Math.Max(0, Previews.Count - MaxPreviewVisible);
    private IReadOnlyList<PreviewItem> VisiblePreviews
        => ShowAllPreviews ? Previews : Previews.Take(MaxPreviewVisible).ToList();
    private static readonly string[] AllowedPrefixes = { "image/", "video/" };

    private MarkupString AlertMessage { get; set; } = new("Henüz anı seçilmedi");
    private int ProgressPercentage { get; set; }
    private bool IsUploadDisabled { get; set; } = true;
    private bool IsProcessingSelection { get; set; } = false;

    private Guid InputFileId { get; set; } = Guid.NewGuid();
    private string _packageName = string.Empty;
    private bool IsPreparing { get; set; } = false;
    private string PackageName
    {
        get => _packageName;
        set
        {
            if (_packageName == value) return;
            _packageName = value;
            ShowSuccessBanner = false;         // yeni işlem başlıyor: başarı bandını gizle
            ValidateFormAndToggleButton();
        }
    }

    private string GetStatusClass()
    {
        if (SelectedFiles.Count > 0 && !string.IsNullOrWhiteSpace(PackageName))
            return "info";
        else if (SelectedFiles.Count > 0)
            return "warning";
        else
            return "default";
    }

    // ===================== EVENTS =====================
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        ShowSuccessBanner = false;
        ProgressPercentage = 0;
        IsPreparing = true;                  // AÇ
        IsUploadDisabled = true;
        StateHasChanged();
        await Task.Yield();

        try
        {
            // Geçici klasör
            var tempRoot = Path.Combine(Env.WebRootPath, "UploadedFiles", "_temp");
            Directory.CreateDirectory(tempRoot);

            var picked = e.GetMultipleFiles();

            foreach (var f in picked)
            {
                var ct = (f.ContentType ?? "").ToLowerInvariant();
                if (!AllowedPrefixes.Any(p => ct.StartsWith(p))) continue;
                if (f.Size > MaxFileSizePerFile) continue;

                // Aynı dosyayı iki kez eklemeyi engelle (Name+Size bazlı)
                var exists = SelectedFiles.Any(x => x.Name == f.Name && x.Size == f.Size);
                if (exists) continue;

                // 1) IBrowserFile --> temp dosya (hemen kopyala, sonra IBrowserFile'a ihtiyaç yok)
                var safeName = MakeEntryNameSafe(f.Name);
                var tmpPath = GetUniquePath(Path.Combine(tempRoot, $"{Guid.NewGuid():N}-{safeName}"));

                await using (var read = f.OpenReadStream(MaxFileSizePerFile))
                await using (var write = File.Create(tmpPath))
                {
                    await read.CopyToAsync(write);
                }

                SelectedFiles.Add(new TempPickedFile
                {
                    Name = f.Name,
                    ContentType = ct,
                    Size = (long)f.Size,
                    TempPath = tmpPath,
                    IsImage = ct.StartsWith("image/")
                });

                // 2) Önizleme (sadece görsel: küçük data url)
                if (ct.StartsWith("image/"))
                {
                    try
                    {
                        var resized = await f.RequestImageFileAsync(ct, 320, 320);
                        await using var rs = resized.OpenReadStream(MaxFileSizePerFile);
                        using var ms = new MemoryStream();
                        await rs.CopyToAsync(ms);
                        var base64 = Convert.ToBase64String(ms.ToArray());
                        Previews.Add(new PreviewItem
                        {
                            IsImage = true,
                            Name = f.Name,
                            DataUrl = $"data:{ct};base64,{base64}",
                            Kind = "image"
                        });
                    }
                    catch
                    {
                        Previews.Add(new PreviewItem { IsImage = false, Name = f.Name, Kind = "image" });
                    }
                }
                else
                {
                    Previews.Add(new PreviewItem { IsImage = false, Name = f.Name, Kind = "video" });
                }
            }

            ValidateFormAndToggleButton();
            StateHasChanged();
        }
        
        finally
        {
            IsPreparing = false;             // KAPAT
            ValidateFormAndToggleButton();
            StateHasChanged();
        }
    }

    private async Task OnSubmitAsync()
    {
        if (SelectedFiles.Count == 0) return;
        if (string.IsNullOrWhiteSpace(PackageName)) { ValidateFormAndToggleButton(); return; }

        IsUploadDisabled = true;

        var uploadRoot = Path.Combine(Env.WebRootPath, "UploadedFiles");
        Directory.CreateDirectory(uploadRoot);

        var safeBase = Slugify(PackageName).Trim('-');
        if (string.IsNullOrWhiteSpace(safeBase)) safeBase = "paket";
        var zipPath = GetUniquePath(Path.Combine(uploadRoot, $"{safeBase}.zip"));

        long totalSize = SelectedFiles.Sum(f => (long)f.Size);
        long totalWritten = 0;

        using var timer = new Timer(_ => InvokeAsync(StateHasChanged));
        timer.Change(TimeSpan.FromMilliseconds(300), TimeSpan.FromMilliseconds(300));

        try
        {
            using var zipFs = File.Create(zipPath);
            using var zip = new ZipArchive(zipFs, ZipArchiveMode.Create, leaveOpen: false);

            const int bufferSize = 512 * 1024;
            byte[] buffer = ArrayPool<byte>.Shared.Rent(bufferSize);

            try
            {
                foreach (var f in SelectedFiles)
                {
                    var entryName = MakeEntryNameSafe(f.Name);
                    var entry = zip.CreateEntry(entryName, CompressionLevel.Fastest);

                    await using var entryStream = entry.Open();
                    await using var src = File.OpenRead(f.TempPath);

                    int read;
                    while ((read = await src.ReadAsync(buffer.AsMemory(0, bufferSize))) != 0)
                    {
                        await entryStream.WriteAsync(buffer.AsMemory(0, read));
                        totalWritten += read;
                        ProgressPercentage = (int)(100 * totalWritten / Math.Max(1, totalSize));
                    }
                }
            }
            finally
            {
                ArrayPool<byte>.Shared.Return(buffer);
            }
        }
        catch (Exception ex)
        {
            AlertMessage = new MarkupString($"Yükleme sırasında hata oluştu: <strong>{ex.Message}</strong>");
            ProgressPercentage = 0;
            IsUploadDisabled = false;
            return;
        }
        finally
        {
            timer.Change(Timeout.Infinite, Timeout.Infinite);
        }

        ProgressPercentage = 100;
        uploadList.Add(Path.GetFileName(zipPath));

        // Temizlik...
        foreach (var f in SelectedFiles)
        {
            try { if (File.Exists(f.TempPath)) File.Delete(f.TempPath); } catch { }
        }

        // İstatistikleri temizlikten ÖNCE al
        var imageCount = SelectedFiles.Count(f => f.IsImage);
        var videoCount = SelectedFiles.Count - imageCount;

        // Listeleri temizle
        SelectedFiles.Clear();
        Previews.Clear();

        // !!! Setter'ı çağırma, direkt backing field ile sıfırla
        _packageName = string.Empty;     // <-- kritik
        InputFileId = Guid.NewGuid();
        IsUploadDisabled = true;

        // EN SON: başarı bandını aç
        ShowSuccessBanner = true;
        SuccessMessage = new MarkupString(
            $"<strong>Anılar başarıyla paylaşıldı! 💕</strong><br/>{imageCount} Fotoğraf, {videoCount} Video eklendi."
        );

        StateHasChanged();
    }

    // ===================== HELPERS =====================
    private void ValidateFormAndToggleButton()
    {
        IsUploadDisabled = true;

        if (SelectedFiles.Count == 0)
        {
            AlertMessage = new MarkupString("Henüz anı seçilmedi");
            return;
        }
        if (string.IsNullOrWhiteSpace(PackageName))
        {
            AlertMessage = new MarkupString("Lütfen isminizi giriniz");
            return;
        }

        var total = SelectedFiles.Sum(s => s.Size);
        AlertMessage = new MarkupString(
            $"<strong>{SelectedFiles.Count}</strong> anı seçildi<br/>İsim: <strong>{PackageName}</strong>"
        );
        IsUploadDisabled = false;
    }

    private static string FormatBytes(long bytes)
    {
        string[] units = { "B", "KB", "MB", "GB", "TB" };
        double size = bytes;
        int unit = 0;
        while (size >= 1024 && unit < units.Length - 1) { size /= 1024; unit++; }
        return $"{size:0.##} {units[unit]}";
    }

    private static string Slugify(string input)
    {
        var s = input.Trim().ToLowerInvariant();
        s = s.Replace('ç', 'c').Replace('ğ', 'g').Replace('ı', 'i')
             .Replace('ö', 'o').Replace('ş', 's').Replace('ü', 'u');
        var arr = s.Select(ch => char.IsLetterOrDigit(ch) ? ch : '-').ToArray();
        var merged = new string(arr);
        while (merged.Contains("--")) merged = merged.Replace("--", "-");
        return merged.Trim('-');
    }

    private static string MakeEntryNameSafe(string fileName)
    {
        var name = Path.GetFileName(fileName);
        var ext = Path.GetExtension(name);
        var stem = Path.GetFileNameWithoutExtension(name);
        var safeStem = Slugify(stem);
        return string.IsNullOrWhiteSpace(safeStem) ? $"dosya{ext}" : $"{safeStem}{ext}";
    }

    private static string GetUniquePath(string desiredFullPath)
    {
        if (!File.Exists(desiredFullPath)) return desiredFullPath;
        var dir = Path.GetDirectoryName(desiredFullPath)!;
        var stem = Path.GetFileNameWithoutExtension(desiredFullPath);
        var ext = Path.GetExtension(desiredFullPath);
        int i = 2;
        string candidate;
        do { candidate = Path.Combine(dir, $"{stem}-{i}{ext}"); i++; }
        while (File.Exists(candidate));
        return candidate;
    }
}

<style>

    .busy-overlay {
        position: fixed;
        inset: 0;
        background: rgba(255,255,255,.55);
        backdrop-filter: blur(3px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .busy-box {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: .75rem;
        padding: 1rem 1.25rem;
        background: rgba(255,255,255,.92);
        border: 1px solid rgba(236,72,153,.25);
        border-radius: 1rem;
        box-shadow: 0 10px 30px rgba(236,72,153,.25);
    }

    .busy-spinner {
        width: 42px;
        height: 42px;
        border-radius: 50%;
        border: 3px solid rgba(236,72,153,.25);
        border-top-color: #ec4899;
        animation: spin 1s linear infinite;
    }

    .busy-text {
        color: #be185d;
        font-weight: 600;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
    /* Wedding Background */
    .wedding-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: 1;
    }

    .floating-heart {
        position: absolute;
        font-size: 1.5rem;
        animation: float-up 8s linear infinite;
        opacity: 0.6;
    }

    .heart-1 {
        left: 10%;
        animation-delay: 0s;
    }

    .heart-2 {
        left: 20%;
        animation-delay: 1s;
    }

    .heart-3 {
        left: 80%;
        animation-delay: 2s;
    }

    .heart-4 {
        left: 70%;
        animation-delay: 3s;
    }

    .heart-5 {
        left: 90%;
        animation-delay: 4s;
    }

    .heart-6 {
        left: 30%;
        animation-delay: 5s;
    }

    /* Wedding Animations */
    @@keyframes float-up {
        0%

    {
        transform: translateY(100vh) rotate(0deg);
        opacity: 0;
    }

    10% {
        opacity: 0.6;
    }

    90% {
        opacity: 0.6;
    }

    100% {
        transform: translateY(-100px) rotate(360deg);
        opacity: 0;
    }

    }

    @@keyframes heart-beat {
        0%, 100%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.1);
    }

    }

    @@keyframes ring-spin {
        from

    {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    }

    .heart-pulse {
        animation: heart-beat 1.5s ease-in-out infinite;
    }

    .wedding-ring {
        animation: ring-spin 4s linear infinite;
        font-size: 1.2rem;
        margin-right: 0.25rem;
    }

    .wedding-logo {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    /* Wedding Icons */
    .wedding-success-icon,
    .wedding-camera-icon,
    .wedding-empty-icon,
    .wedding-user-icon,
    .wedding-camera-label,
    .wedding-upload-icon,
    .wedding-sparkle,
    .wedding-heart,
    .wedding-video,
    .wedding-upload-btn-icon {
        font-size: 1rem;
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }

    /* Reset and Base Styles */
    * {
        box-sizing: border-box;
    }

    .app-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #fce7f3 0%, #f3e8ff 50%, #fdf2f8 100%);
        padding: 1rem;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        max-width: 100%;
        margin: 0 auto;
        position: relative;
        z-index: 2;
    }

    @@media (min-width: 640px) {
        .app-container

    {
        padding: 1.5rem;
        max-width: 640px;
    }

    }

    @@media (min-width: 1024px) {
        .app-container

    {
        max-width: 1024px;
        padding: 2rem;
    }

    }

    /* Header */
    .header {
        text-align: center;
        margin-bottom: 2rem;
        color: #be185d;
    }

    .header-icon {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 3.5rem;
        height: 3.5rem;
        background: linear-gradient(135deg, #ec4899, #8b5cf6);
        border-radius: 1rem;
        margin-bottom: 1rem;
        backdrop-filter: blur(10px);
        color: white;
        box-shadow: 0 8px 25px rgba(236, 72, 153, 0.3);
    }

    @@media (min-width: 640px) {
        .header-icon

    {
        width: 4rem;
        height: 4rem;
    }

    }

    .header-title {
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0 0 0.5rem 0;
        background: linear-gradient(135deg, #be185d, #7c3aed);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    @@media (min-width: 640px) {
        .header-title

    {
        font-size: 2rem;
    }

    }

    .header-subtitle {
        font-size: 1rem;
        margin: 0;
        color: #be185d;
        padding: 0 1rem;
    }

    @@media (min-width: 640px) {
        .header-subtitle

    {
        font-size: 1.125rem;
        padding: 0;
    }

    }

    /* Cards */
    .upload-card, .files-card {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(20px);
        border-radius: 1.5rem;
        box-shadow: 0 20px 25px -5px rgba(236, 72, 153, 0.1), 0 10px 10px -5px rgba(236, 72, 153, 0.04);
        margin-bottom: 1.5rem;
        overflow: hidden;
        padding: 1rem;
        border: 1px solid rgba(236, 72, 153, 0.1);
    }

    @@media (min-width: 640px) {
        .upload-card, .files-card

    {
        padding: 1.5rem;
    }

    }

    /* Files Card */
    .files-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 1.5rem;
    }

    .files-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        background: linear-gradient(135deg, #ec4899, #8b5cf6);
        border-radius: 0.75rem;
        color: white;
    }

    .files-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #be185d;
        margin: 0;
    }

    @@media (min-width: 640px) {
        .files-title

    {
        font-size: 1.25rem;
    }

    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
    }

    @@media (min-width: 640px) {
        .empty-state

    {
        padding: 4rem 1rem;
    }

    }

    .empty-icon {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        width: 4rem;
        height: 4rem;
        background: linear-gradient(135deg, #fce7f3, #f3e8ff);
        border-radius: 1rem;
        margin-bottom: 1rem;
        color: #ec4899;
    }

    @@media (min-width: 640px) {
        .empty-icon

    {
        width: 5rem;
        height: 5rem;
    }

    }

    .empty-text {
        font-size: 1rem;
        font-weight: 500;
        color: #be185d;
        margin: 0 0 0.5rem 0;
    }

    @@media (min-width: 640px) {
        .empty-text

    {
        font-size: 1.125rem;
    }

    }

    .empty-hint {
        font-size: 0.875rem;
        color: #d946ef;
        margin: 0;
        padding: 0 1rem;
    }

    .files-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .file-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: linear-gradient(135deg, rgba(252, 231, 243, 0.5), rgba(243, 232, 255, 0.5));
        border: 1px solid rgba(236, 72, 153, 0.2);
        border-radius: 0.75rem;
        transition: all 0.2s ease;
    }

        .file-item:hover {
            background: linear-gradient(135deg, rgba(252, 231, 243, 0.8), rgba(243, 232, 255, 0.8));
            border-color: #ec4899;
        }

    .file-item-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2rem;
        height: 2rem;
        background: linear-gradient(135deg, #ec4899, #8b5cf6);
        border-radius: 0.5rem;
        color: white;
        flex-shrink: 0;
    }

    .file-name {
        font-size: 0.875rem;
        font-weight: 500;
        color: #be185d;
        word-break: break-all;
    }

    @@media (min-width: 640px) {
        .file-name

    {
        font-size: 1rem;
    }

    }

    /* Status Banner */
    .status-banner {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        padding: 1rem;
        border-radius: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.875rem;
        line-height: 1.4;
    }

    @@media (min-width: 640px) {
        .status-banner

    {
        font-size: 1rem;
    }

    }

    .status-banner.success {
        background: linear-gradient(135deg, #ec4899, #8b5cf6);
        color: white;
    }

    .status-banner.info {
        background: linear-gradient(135deg, #ec4899, #8b5cf6);
        color: white;
    }

    .status-banner.warning {
        background: linear-gradient(135deg, #f59e0b, #ec4899);
        color: white;
    }

    .status-banner.default {
        background: linear-gradient(135deg, #d946ef, #8b5cf6);
        color: white;
    }

    .status-icon {
        flex-shrink: 0;
        margin-top: 0.125rem;
    }

    .status-content {
        flex: 1;
    }

    /* Progress Bar */
    .progress-container {
        margin-bottom: 1.5rem;
    }

    .progress-bar {
        width: 100%;
        height: 0.5rem;
        background: rgba(236, 72, 153, 0.2);
        border-radius: 9999px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #ec4899, #8b5cf6);
        border-radius: 9999px;
        transition: width 0.3s ease;
        box-shadow: 0 0 10px rgba(236, 72, 153, 0.5);
    }

    .progress-text {
        font-size: 0.75rem;
        color: #be185d;
        text-align: center;
    }

    @@media (min-width: 640px) {
        .progress-text

    {
        font-size: 0.875rem;
    }

    }

    /* Form */
    .upload-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .form-label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #be185d;
    }

    @@media (min-width: 640px) {
        .form-label

    {
        font-size: 1rem;
    }

    }

    .form-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid rgba(236, 72, 153, 0.2);
        border-radius: 0.75rem;
        font-size: 1rem;
        transition: all 0.2s ease;
        background: rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
    }

    @@media (min-width: 640px) {
        .form-input

    {
        padding: 1rem 1.25rem;
    }

    }

    .form-input:focus {
        outline: none;
        border-color: #ec4899;
        box-shadow: 0 0 0 3px rgba(236, 72, 153, 0.1);
        background: rgba(255, 255, 255, 0.95);
    }

    .form-input::placeholder {
        color: #d946ef;
    }

    /* File Input */
    .file-input-wrapper {
        position: relative;
    }

    .file-input {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
        z-index: 10;
    }

    .file-input-display {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        border: 2px dashed rgba(236, 72, 153, 0.3);
        border-radius: 0.75rem;
        background: linear-gradient(135deg, rgba(252, 231, 243, 0.5), rgba(243, 232, 255, 0.3));
        backdrop-filter: blur(10px);
        transition: all 0.2s ease;
        cursor: pointer;
        text-align: center;
    }

    @@media (min-width: 640px) {
        .file-input-display

    {
        padding: 2.5rem 1rem;
    }

    }

    .file-input-display:hover {
        background: linear-gradient(135deg, rgba(252, 231, 243, 0.8), rgba(243, 232, 255, 0.6));
        border-color: #ec4899;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(236, 72, 153, 0.15);
    }

    .file-input-icon {
        margin-bottom: 0.75rem;
        color: #ec4899;
    }

    .file-input-text {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .file-count, .file-placeholder {
        font-size: 0.875rem;
        font-weight: 500;
        color: #be185d;
    }

    @@media (min-width: 640px) {
        .file-count, .file-placeholder

    {
        font-size: 1rem;
    }

    }

    .file-hint {
        font-size: 0.75rem;
        color: #d946ef;
    }

    @@media (min-width: 640px) {
        .file-hint

    {
        font-size: 0.875rem;
    }

    }

    /* Previews */
    .previews-section {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .previews-title {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: #be185d;
        margin: 0;
    }

    @@media (min-width: 640px) {
        .previews-title

    {
        font-size: 1rem;
    }

    }

    .preview-strip {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        max-height: 10rem;
        overflow-y: auto;
    }

    .thumb {
        width: 4rem;
        height: 4rem;
        border: 1px solid rgba(236, 72, 153, 0.2);
        border-radius: 0.5rem;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, rgba(252, 231, 243, 0.5), rgba(243, 232, 255, 0.3));
        position: relative;
        flex-shrink: 0;
        transition: all 0.3s ease;
    }

    @@media (min-width: 640px) {
        .thumb

    {
        width: 4.5rem;
        height: 4.5rem;
    }

    }

    .thumb:hover {
        transform: translateY(-4px);
        box-shadow: 0 12px 30px rgba(236, 72, 153, 0.2);
    }

    .thumb img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .image-thumb {
        position: relative;
    }

    .thumb-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(236, 72, 153, 0.9), rgba(139, 92, 246, 0.9));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .thumb:hover .thumb-overlay {
        opacity: 1;
    }

    .video-thumb {
        background: linear-gradient(135deg, rgba(236, 72, 153, 0.1), rgba(139, 92, 246, 0.1));
        flex-direction: column;
        gap: 0.25rem;
    }

    .thumb-icon {
        color: #ec4899;
    }

    .thumb-label {
        font-size: 0.625rem;
        font-weight: 500;
        color: #be185d;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .more-thumb {
        background: linear-gradient(135deg, rgba(236, 72, 153, 0.1), rgba(139, 92, 246, 0.1));
        border: 2px dashed rgba(236, 72, 153, 0.3);
        color: #ec4899;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .more-thumb:hover {
            background: linear-gradient(135deg, rgba(236, 72, 153, 0.2), rgba(139, 92, 246, 0.2));
            border-color: #ec4899;
        }

    .more-count {
        font-size: 0.875rem;
        font-weight: 600;
    }

    .preview-toggle {
        display: flex;
        justify-content: center;
    }

    .toggle-btn {
        background: none;
        border: none;
        color: #be185d;
        font-size: 0.75rem;
        cursor: pointer;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        transition: all 0.2s ease;
    }

    @@media (min-width: 640px) {
        .toggle-btn

    {
        font-size: 0.875rem;
    }

    }

    .toggle-btn:hover {
        color: #ec4899;
        background: rgba(252, 231, 243, 0.5);
    }

    /* Upload Button */
    .upload-button-container {
        display: flex;
        justify-content: center;
    }

    .upload-button {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
        width: 100%;
        max-width: 28rem;
        padding: 1rem 1.5rem;
        background: linear-gradient(135deg, #ec4899, #8b5cf6);
        color: white;
        border: none;
        border-radius: 0.75rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        box-shadow: 0 8px 25px rgba(236, 72, 153, 0.3);
    }

    @@media (min-width: 640px) {
        .upload-button

    {
        padding: 1.25rem 2rem;
        font-size: 1.125rem;
    }

    }

    .upload-button:hover:not(.disabled) {
        background: linear-gradient(135deg, #be185d, #7c3aed);
        box-shadow: 0 12px 35px rgba(236, 72, 153, 0.4);
        transform: translateY(-2px);
    }

    .upload-button.disabled {
        background: linear-gradient(135deg, #d1d5db, #9ca3af);
        cursor: not-allowed;
        box-shadow: none;
    }

    .upload-button:active:not(.disabled) {
        transform: translateY(0);
    }

    @@media (max-width: 640px) {
        .floating-heart

    {
        font-size: 1.2rem;
    }

    .wedding-ring {
        font-size: 1rem;
    }

    }
</style>